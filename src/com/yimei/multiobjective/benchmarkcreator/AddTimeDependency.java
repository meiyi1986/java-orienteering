package com.yimei.multiobjective.benchmarkcreator;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import com.yimei.multiobjective.core.Vertex;

/***
 * This is the benchmark creator which transforms the Schilde's static bi-objective 
 * Orienteering Problem into a corresponding time-dependent problem.
 * The arc category file is generated by a heuristic that first assign the category of each arc
 * randomly, and change the category of the arcs recursively.
 * @author Yi Mei
 *
 */

public class AddTimeDependency extends BenchmarkCreator {

	public AddTimeDependency(File fromDir, File fromFile, File toDir,
			File toFile, Random rnd) {
		super(fromDir, fromFile, toDir, toFile, rnd);
	}



	@Override
	public void execute() {
		
		/** read the file **/
		int numVertices = -1;

		try (BufferedReader br = new BufferedReader(new FileReader(fromFile)))
		{

			String sCurrentLine;
			String[] commaSep;
			String[] spaceSep;
			
			// the number of vertices, scores, constraints, and start and ending points
			while ((sCurrentLine = br.readLine()) != null) {
				commaSep = sCurrentLine.split(",");
				
				if (commaSep[0].equals("N")) {
					spaceSep = commaSep[1].split("\\s+");
					for (int i = 0; i < spaceSep.length; i++) {
						if (spaceSep[i].length() > 0) {
							numVertices = Integer.parseInt(spaceSep[i]);
							break;
						}
					}
					
					break;
				}				
			}
			
			System.out.println(numVertices);
 
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// initialize the category matrix with randomly assigned values from {0,1,2,3,4}
		int[][] catMtx = new int[numVertices][numVertices];
		for (int i = 0; i < numVertices; i++) {
			for (int j = 0; j < numVertices; j++) {
				if (j == i) {
					catMtx[i][j] = 4;
				}
				else {
					catMtx[i][j] = rnd.nextInt(5);
				}
			}
		}
		
		for (int i = 0; i < numVertices; i++) {
			for (int j = 0; j < numVertices; j++) {
				System.out.print(catMtx[i][j] + " ");
			}
			System.out.println();
		}
		
		// for each arc, randomly select one of its predecessor (e.g. the (a,b) -> (b,c))
		// replace its category with that of its predecessor
		int gen = 0;
		while (gen < 10) {
			gen ++;
			for (int i = 0; i < numVertices; i++) {
				for (int j = 0; j < numVertices; j++) {
					if (j == i)
						continue;
					
					// randomly select one of the predecessor
					int pred = rnd.nextInt(numVertices-1);
					if (pred >= i) {
						pred ++;
					}
					
					catMtx[i][j] = catMtx[pred][i];
				}
			}
			
			
		}
		
		System.out.println("gen " + gen);
		for (int i = 0; i < numVertices; i++) {
			for (int j = 0; j < numVertices; j++) {
				System.out.print(catMtx[i][j] + " ");
			}
			System.out.println();
		}
		
		
		/** create the new directory **/
		if (!toDir.exists()) {
			toDir.mkdirs();
		}
		
		/** write the new file **/
		try (BufferedWriter output = new BufferedWriter(new FileWriter(toFile)))
		{
			for (int i = 0; i < numVertices; i++) {
				for (int j = 0; j < numVertices; j++) {
					output.write(catMtx[i][j] + " ");
				}
				output.newLine();	
			}
		} catch (IOException e) {
				e.printStackTrace();
		}
	}

	
	
	public static void main(String [] args) {
		
		String fd = "data/moop/2 objectives/2_p2143/";
		String ff = "2_p2143.txt";
		String td = "data/moop/2 objectives/2_p2143/";
		String tf = "arc_cat.txt";
		
		File fromDir = new File(fd);
		File fromFile = new File(fd + ff);
		File toDir = new File(td);
		File toFile = new File(td + tf);
		
		Random rnd = new Random(0);
		
		BenchmarkCreator bc = new AddTimeDependency(fromDir, fromFile, toDir, toFile, rnd);
		bc.execute();
	}
}
